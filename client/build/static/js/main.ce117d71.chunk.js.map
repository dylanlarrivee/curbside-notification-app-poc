{"version":3,"sources":["img/ShawScott_Logo_Gradient.png","components/currentPickups.js","components/completedPickups.js","components/home.js","components/loadingBar.js","components/admin.js","components/logout.js","components/signIn.js","components/pageNotFound.js","components/resetPassword.js","components/forgotPassword.js","components/topNav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoadingBar","props","style","width","height","display","justifyContent","alignItems","type","color","StatusColumn","completeOrderProcesssing","e","displayOrderId","p","orderId","mongoId","target","parentNode","id","window","confirm","payload","clerkName","username","setLoading","axios","url","method","data","then","deleteOrderIndex","currentCustomerData","findIndex","element","_id","tempCompletedOrders","splice","setCurrentCustomerData","catch","console","log","columnClass","columnAmount","value","key","className","index","orderStatus","onClick","fullName","tempProcessingOrders","usernameProcessing","tempStopOrders","CurrentPickups","useState","loading","pageHasLoaded","setPageHasLoaded","currentColumnIdsArray","setCurrentColumnIdsArray","currentColumnCopy","setCurrentColumnCopy","currentQueue","count","currentFullName","currentStoreId","storeId","currentCompanyId","companyId","currentUsername","useEffect","tableColumnIds","tableColumnCopy","error","location","hostname","getCurrentOrders","pathname","curCustData","sort","a","b","Date","orderSubmittedDate","length","Notification","queueCount","clearInterval","currentInterval","setInterval","map","completedCustomerData","setCompletedCustomerData","setTimeout","clerkNameCompleted","CompletedPickups","Loading","tableColumnHasLoaded","setTableColumnHasLoaded","completedColumnIdsArray","setCompletedColumnIdsArray","completedColumnCopy","setCompletedColumnCopy","completedStoreId","completedCompanyId","getCompletedOrders","compCustData","orderCompletedDate","completeInterval","HomePage","storeStatus","setStoreStatus","storeStatusLoading","setStoreStatusLoading","homeStoreId","JSON","stringify","storeStatusPayload","updateStoreStatus","updatedStoreStatus","changeStoreStatus","EnableNotifications","permission","changeNotificationStatus","aria-label","SendPwResteEmailButton","pwResetEmailSentStatus","sendPWResetEMail","ErrorMessageDisplay","usernameErrorMessage","SuccessMessageDisplay","usernameSuccessMessage","DeleteProfileButton","confirmDelete","AddProfile","handleUserChange","evt","name","newValue","setNewUserData","storeUsers","action","htmlFor","onChange","newUserData","newUsername","newUserFullName","email","newUserEmail","adminCompanyId","adminStoreId","userRoleType","message","setUsernameSuccessMessage","tempStoreUsers","push","setStoreUsers","resetPayload","setUsernameErrorMessage","response","Admin","historicalData","setHistoricalData","storeUsersLoaded","setStoreUsersLoaded","setPwResetEmailSentStatus","useReducer","state","newState","adminFullName","adminUsername","userData","requestPermission","deleteUsername","deleteUserIndex","downloadReport","document","getElementById","click","SuperUserLevelUser","href","AdminLevelUser","padding","StandardLevelUser","filename","Logout","appHistory","createBrowserHistory","SignInPage","loginUserName","loginUserPassword","loginErrorMessage","userLoginData","setUserLoginData","handleChange","src","shawScottLogo","alt","onSubmit","event","preventDefault","password","token","localStorage","setItem","errorMessage","go","placeholder","PageNotFound","resetPasswordData","resetErrorMessage","v-for","VerifyTokenDiplay","setResetPasswordData","tokenVerified","passwordUpdated","newPassword","confirmNewPassword","tokenLoaded","ResetPasswordPage","passwordResetToken","params","URLSearchParams","search","has","get","success","includes","forgotPasswordData","PasswordResetConfirmation","setForgotPasswordData","passwordEmailSent","resetEmailLoading","ForgotPassword","AuthContext","React","createContext","Auth","children","jwtToken","jwt","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","setStoreId","setCompanyId","setFullName","setUsername","setUserRoleType","headers","Accept","authorization","Provider","TopNav","mobileMenuClose","checked","refreshNowPage","refreshTodayPage","logout","clear","FullNavBar","to","activeClassName","AuthenticatedRoute","Component","component","rest","useContext","render","from","exact","path","ResetPassword","App","Boolean","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce117d71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ShawScott_Logo_Gradient.44fdb4aa.png\";","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\n\n// Build out a component for the loding bar\nconst LoadingBar = (props) => {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Loader type=\"ThreeDots\" color={props.color} height=\"100\" width=\"100\" />\n    </div>\n  );\n};\n// Populate the Job Status column\nconst StatusColumn = (props) => {\n  function orderProcessing(e) {\n    let displayOrderId = props.p.orderId;\n    let mongoId = e.target.parentNode.parentNode.id;\n    //let displayOrderId = e.target.parentNode.parentNode.id;\n    if (\n      window.confirm(\n        \"Confirm that you are ready to process order # \" +\n          displayOrderId\n      )\n    ) {\n      let payload = {\n        id: e.target.parentNode.parentNode.id,\n        clerkName: props.fullName,\n        username: props.username\n\n      };\n      props.setLoading(true);\n      axios({\n        url: \"/api/order-processing\",\n        method: \"POST\",\n        data: payload,\n      })\n        .then(() => {\n          let completeOrderFindIndex = (element) => element._id === mongoId;\n          let deleteOrderIndex = props.currentCustomerData.findIndex(completeOrderFindIndex);\n          let tempProcessingOrders = props.currentCustomerData;\n          tempProcessingOrders[deleteOrderIndex].usernameProcessing = props.username\n          tempProcessingOrders[deleteOrderIndex].orderStatus = \"processing\";\n          props.setCurrentCustomerData([...tempProcessingOrders]);\n          // setTimeout(function() { props.setLoading(false); }, 2000);\n          props.setLoading(false);\n        })\n        .catch(() => {\n          console.log(\"Internal server error\");\n          props.setLoading(false);\n          // setTimeout(function () {\n          //   props.setLoading(false);\n          // }, 3000);\n          window.confirm(\n            \"Internal system error. Record could not be deleted. Please try again.\"\n          )\n        });\n    }\n  }\n\n  function stopOrderProcessing(e) {\n    let displayOrderId = props.p.orderId;\n    let mongoId = e.target.parentNode.parentNode.id;\n    if (\n      window.confirm(\n        \"Confirm that you want to stop processing order # \" +\n          displayOrderId\n      )\n    ) {\n      let payload = {\n        id: e.target.parentNode.parentNode.id,\n        clerkName: props.fullName,\n        username: props.username\n\n      };\n      props.setLoading(true);\n      axios({\n        url: \"/api/stop-order-processing\",\n        method: \"POST\",\n        data: payload,\n      })\n        .then(() => {\n          let completeOrderFindIndex = (element) => element._id === mongoId;\n          let deleteOrderIndex = props.currentCustomerData.findIndex(completeOrderFindIndex);\n          let tempStopOrders = props.currentCustomerData;\n          tempStopOrders[deleteOrderIndex].orderStatus = \"submitted\";\n          props.setCurrentCustomerData([...tempStopOrders]);\n          props.setLoading(false);\n        })\n        .catch(() => {\n          console.log(\"Internal server error\");\n          props.setLoading(false);\n          // setTimeout(function () {\n          //   props.setLoading(false);\n          // }, 3000);\n          window.confirm(\n            \"Internal system error. Record could not be deleted. Please try again.\"\n          )\n        });\n    }\n  }\n\n  function completeOrderProcesssing(e) {\n    let displayOrderId = props.p.orderId;\n    let mongoId = e.target.parentNode.parentNode.id;\n    if (\n      window.confirm(\n        \"Confirm that order # \" +\n          displayOrderId +\n          \" has picked up their order and can be removed.\"\n      )\n    ) {\n      let payload = {\n        id: mongoId,\n        clerkName: props.username\n      };\n      props.setLoading(true);\n      axios({\n        url: \"/api/order-complete/\",\n        method: \"POST\",\n        data: payload,\n      })\n        .then(() => {\n          let completeOrderFindIndex = (element) => element._id === mongoId;\n          let deleteOrderIndex = props.currentCustomerData.findIndex(completeOrderFindIndex);\n          let tempCompletedOrders = props.currentCustomerData;\n          tempCompletedOrders.splice(deleteOrderIndex, 1);\n          props.setCurrentCustomerData([...tempCompletedOrders]);\n          props.setLoading(false);\n          // setTimeout(function () {\n          //   props.setLoading(false);\n          // }, 3000);\n        })\n        .catch(() => {\n          console.log(\"Internal server error\");\n          props.setLoading(false);\n          // setTimeout(function () {\n          //   props.setLoading(false);\n          // }, 3000);\n          window.confirm(\n            \"Internal system error. Record could not be updated to completed. Please try again.\"\n          )\n        });\n    }\n  }\n  const columnClass = \"table-item table-item-0\" + props.columnAmount\n  \nif (props.value === \"jobStatus\") {\n  if (props.p.orderStatus === \"submitted\") {\n    return (\n      <div key={\"table_\" + props.value} className={columnClass}>\n        <button id={props.p._id}\n            onClick={orderProcessing}\n            className=\"btn-start\">Start</button>\n        <button id={props.p._id}\n            onClick={completeOrderProcesssing}\n            className=\"btn-complete\">Complete</button>\n    </div>\n    )\n  } else if (props.p.orderStatus === \"processing\") {\n    if(props.username === props.p.usernameProcessing) {\n      return (\n        <div key={\"table_\" + props.value} className={columnClass}>\n          <button onClick={stopOrderProcessing} className=\"btn-stop\">Stop</button>\n          <button id={props.p._id}\n              onClick={completeOrderProcesssing}\n              className=\"btn-complete\">Complete</button>\n              <p className=\"job-status-comment\">You are working on this job.</p>\n        </div>\n    )\n    } else {\n      return (\n        <div key={\"table_\" + props.value} className={columnClass}>\n          <button className=\"btn-started\">Started</button>\n          <button id={props.p._id}\n              onClick={completeOrderProcesssing}\n              className=\"btn-complete\">Complete</button>\n              <p className=\"job-status-comment\">{props.p.usernameProcessing} is working on this job.</p>\n        </div>\n    )\n    }\n    \n  }\n} else {\n  return (\n    <div key={\"table_\" + props.value} className={\"table-item table-item-0\" + props.index}>\n      <p>{props.p[props.value]}</p>\n    </div>\n  )\n}\n}\n\nconst CurrentPickups = (props) => {\n\n  const setIntervalTime = 1000\n  \n  // Notification.requestPermission()\n  // console.log(\"notification updates\")\n\n  const [currentCustomerData, setCurrentCustomerData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pageHasLoaded, setPageHasLoaded] = useState(false);\n  const [currentColumnIdsArray, setCurrentColumnIdsArray] = useState([]);\n  const [currentColumnCopy, setCurrentColumnCopy] = useState({});\n\n  // const [currentCustomerCount, setCurrentCustomerCount] = useState(0);\n\n  const currentQueue = {\n    count:0\n  }\n  // const curStreamData = {\n  //   firstLoad:false\n  // }\n\n  const currentFullName = props.fullName\n  const currentStoreId = props.storeId\n  const currentCompanyId = props.companyId\n  const currentUsername = props.username\n\n  useEffect(() => {\n    if (currentCompanyId && currentStoreId) {\n      let payload = {\n        companyId: currentCompanyId\n      }\n      axios({\n        url: \"/api/table-columns\",\n        method: \"POST\",\n        data: payload,\n      })\n        .then((data) => {\n          setCurrentColumnIdsArray(data.data.data[0].tableColumnIds);\n          setCurrentColumnCopy(data.data.data[0].tableColumnCopy); \n        })\n        .catch((error) => {\n          console.log(\"Internal server error:\", error);\n        });\n        \n        if (process.env.NODE_ENV === \"production\") {\n          // for local docker:\n          if (window.location.hostname === \"127.0.0.1\") {\n            let getCurrentOrders = () => {\n              let url = \"http://localhost:3000/api/current-orders\";    \n              let payload = \n                  {storeId: currentStoreId,\n                  companyId: currentCompanyId};\n              axios({\n              url: url,\n              method: \"POST\",\n              data: payload,\n              })\n              .then((data) => {\n                if (window.location.pathname === \"/current-orders\") {\n                  let curCustData = data.data.data;\n                  curCustData.sort(function(a, b) {\n                      a = new Date(a.orderSubmittedDate);\n                      b = new Date(b.orderSubmittedDate);\n                      return b>a ? -1 : b<a ? 1 : 0;\n                  });\n                  setCurrentCustomerData([...curCustData]);\n                  setPageHasLoaded(true);\n                  if (currentQueue.count < curCustData.length) {\n                    new Notification('There are customers in your queue')\n                  }\n                  let queueCount = curCustData.length\n                  currentQueue.count = queueCount\n                }  else {\n                  clearInterval(currentInterval);\n                }\n\n              })\n              .catch((error) => {\n              console.log(\"getOrdersError: Internal server error:\", error);\n              });\n            }\n            getCurrentOrders();  \n            let currentInterval = setInterval(getCurrentOrders, setIntervalTime);\n          } else {\n            let getCurrentOrders = () => {\n              let url = \"https://\" + window.location.hostname + \"/api/current-orders\";  \n              let payload = \n                  {storeId: currentStoreId,\n                  companyId: currentCompanyId};\n              axios({\n              url: url,\n              method: \"POST\",\n              data: payload,\n              })\n              .then((data) => {\n                if (window.location.pathname === \"/current-orders\") {\n                  let curCustData = data.data.data;\n                  curCustData.sort(function(a, b) {\n                      a = new Date(a.orderSubmittedDate);\n                      b = new Date(b.orderSubmittedDate);\n                      return b>a ? -1 : b<a ? 1 : 0;\n                  });\n                  setCurrentCustomerData([...curCustData]);\n                  setPageHasLoaded(true);\n                  if (currentQueue.count < curCustData.length) {\n                    new Notification('There are customers in your queue')\n                  }\n                  let queueCount = curCustData.length\n                  currentQueue.count = queueCount\n                }  else {\n                  clearInterval(currentInterval);\n                }\n              })\n              .catch((error) => {\n              console.log(\"getOrdersError: Internal server error:\", error);\n              });\n            }\n            getCurrentOrders();  \n            let currentInterval = setInterval(getCurrentOrders, setIntervalTime);\n          }\n      } \n        else {\n          let getCurrentOrders = () => {\n              console.log(\"running\")\n              let url = \"http://localhost:8080/api/current-orders\";  \n              let payload = \n                  {storeId: currentStoreId,\n                  companyId: currentCompanyId};\n              axios({\n              url: url,\n              method: \"POST\",\n              data: payload,\n              })\n              .then((data) => {\n                if (window.location.pathname === \"/current-orders\") {\n                  let curCustData = data.data.data;\n                  curCustData.sort(function(a, b) {\n                      a = new Date(a.orderSubmittedDate);\n                      b = new Date(b.orderSubmittedDate);\n                      return b>a ? -1 : b<a ? 1 : 0;\n                  });\n                  setCurrentCustomerData([...curCustData]);\n                  setPageHasLoaded(true);\n                  if (currentQueue.count < curCustData.length) {\n                    new Notification('There are customers in your queue')\n                  }\n                  let queueCount = curCustData.length\n                  currentQueue.count = queueCount\n                }  else {\n                  clearInterval(currentInterval);\n                }\n              })\n              .catch((error) => {\n              console.log(\"getOrdersError: Internal server error:\", error);\n              });\n            }\n            getCurrentOrders();  \n          let currentInterval = setInterval(getCurrentOrders, setIntervalTime);\n          }\n    }\n  }, [currentCompanyId, currentStoreId]);\n\n  const renderLoadingBar = () => {  \n    if (currentCustomerData.length === 0 && pageHasLoaded) {\n      return (\n        <div className=\"no-customer-que\">\n          No customers currently in the que\n        </div>\n        );\n    } else if (currentCustomerData.length === 0 && !pageHasLoaded) {\n      return (\n        <div>\n        <LoadingBar color=\"#dddddd\" />\n      </div>\n      );\n    } else if (loading) {\n      return (\n        <div>\n        <LoadingBar color=\"#dddddd\" />\n      </div>\n      );\n    } else {\n      return (\n        // table container\n        <div>\n          {currentCustomerData.map((p) => (\n            <div id={p._id} key={p._id} className=\"table-container col-5\">\n             {currentColumnIdsArray.map((value, index) =>\n                <div key={\"header_\" + index+1} className={\"table-item-header header-0\" + index}>\n                  <p>{currentColumnCopy[value]}</p>\n                </div>\n                )} \n                {currentColumnIdsArray.map((value, index) =>\n                  <StatusColumn key={value} p={p} setLoading={setLoading} columnAmount={index} value={value} index={index} fullName={currentFullName} username={currentUsername} currentCustomerData={currentCustomerData} setCurrentCustomerData={setCurrentCustomerData} />\n              )} \n            </div>\n          ))}\n        </div>\n      );\n    }\n  };\n\n  \n\n  return (\n    <div>\n      <main>\n        <h1>Curbside Pickup Store #{props.storeId}</h1>\n        <h2>Clerk Name: <span className=\"clerk-color\">{currentFullName}</span></h2>\n        <h2>Username: <span className=\"clerk-color\">{currentUsername}</span></h2>\n        <p >Real time updates as customers are outside your&nbsp;store.</p>\n        <br />\n        <div>{renderLoadingBar()}</div>\n      </main>\n    </div>\n  );\n};\n\nexport default CurrentPickups;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\n\n\n// Build out a component for the counter\nconst LoadingBar = (props) => {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Loader type=\"ThreeDots\" color={props.color} height=\"100\" width=\"100\" />\n    </div>\n  );\n};\n\nconst StatusColumn = (props) => {\n  console.log(\"xcompletedCustomerDat:\", props.completedCustomerData)\n  function addBackToQueue(e) {\n    let displayOrderId = props.p.orderId;\n    let mongoId = e.target.id;\n\n    if (\n      window.confirm(\n        \"Confirm that order # \" +\n          displayOrderId +\n          \" should be added back to the current pickups queue?\"\n      )\n    ) {\n      let payload = {\n        mongoId: mongoId,\n        orderId: displayOrderId,\n      };\n      props.setLoading(true)\n      axios({\n        url: \"/api/order-completed-undo/\",\n        method: \"POST\",\n        data: payload,\n      })\n        .then(() => {\n          console.log(\"Customer has been added back to the current pickups queue\");\n          let completeOrderFindIndex = (element) => element._id == mongoId;\n          let deleteOrderIndex = props.completedCustomerData.findIndex(completeOrderFindIndex);\n          let tempCompletedOrders = props.completedCustomerData;\n          tempCompletedOrders.splice(deleteOrderIndex, 1);\n          props.setCompletedCustomerData([...tempCompletedOrders]);\n\n\n          // setTimeout(function () {\n          //   props.setLoading(false);\n          // }, 3000);\n        })\n        .catch((error) => {\n          console.log(\"Internal server error:\", error);\n          setTimeout(function () {\n            props.setLoading(false);\n          }, 3000);\n          window.confirm(\n            \"Internal system error. Record could not be added back. Please try again.\"\n          )\n        });\n    }\n  }\n  if (props.value === \"jobStatus\") {\n    return (\n      <div className=\"table-item table-item-05\">\n                <button id={props.p._id}\n                  onClick={addBackToQueue} \n                  className=\"btn-pickedup\">Undo Pickup</button>\n                <p className=\"job-status-comment\">Job completed by {props.p.clerkNameCompleted}</p>\n              </div>\n    )\n  } else {\n    return (\n      <div key={\"table_\" + props.value} className={\"table-item table-item-0\" + props.index}>\n        <p>{props.p[props.value]}</p>\n      </div>\n    )\n  }\n  }\n\nconst CompletedPickups = (props) => {\n  const setIntervalTime = 3000\n\n  const [completedCustomerData, setCompletedCustomerData] = useState([]);\n  const [Loading, setLoading] = useState(false);\n  const [pageHasLoaded, setPageHasLoaded] = useState(false);\n  const [tableColumnHasLoaded, setTableColumnHasLoaded] = useState(false);\n  const [completedColumnIdsArray, setCompletedColumnIdsArray] = useState(\"\");\n  const [completedColumnCopy, setCompletedColumnCopy] = useState({});\n\n  const completedFullName = props.fullName\n  const completedStoreId = props.storeId\n  const completedCompanyId = props.companyId\n  const completedUsername = props.username\n\n  useEffect(() => {\n   if (completedCompanyId && completedStoreId) {\n    let payload = {\n      companyId: completedCompanyId\n    }\n    axios({\n      url: \"/api/table-columns\",\n      method: \"POST\",\n      data: payload,\n    })\n      .then((data) => {\n        setCompletedColumnIdsArray(data.data.data[0].tableColumnIds);\n        setCompletedColumnCopy(data.data.data[0].tableColumnCopy);\n        setTableColumnHasLoaded(true) \n      })\n      .catch(() => {\n        console.log(\"Internal server error\");\n      }); \n    \n    if (process.env.NODE_ENV === \"production\") {\n      // for local docker:\n      if (window.location.hostname === \"127.0.0.1\") {\n        let getCompletedOrders = () => {\n          let url = \"http://localhost:3000/api/completed-orders\"; \n          let payload = \n              {storeId: completedStoreId,\n              companyId: completedCompanyId};\n          axios({\n          url: url,\n          method: \"POST\",\n          data: payload,\n          })\n          .then((data) => {\n            if (window.location.pathname === \"/completed-orders\") {\n              let compCustData = data.data.data;\n                  compCustData.sort(function(a, b) {\n                      a = new Date(a.orderCompletedDate);\n                      b = new Date(b.orderCompletedDate);\n                      return a>b ? -1 : a<b ? 1 : 0;\n                  });\n              setCompletedCustomerData([...compCustData]);\n              setPageHasLoaded(true);\n            }  else {\n              clearInterval(completeInterval);\n            }\n          })\n          .catch((error) => {\n          console.log(\"getOrdersError: Internal server error:\", error);\n          });                                   \n          }\n          getCompletedOrders();\n        let completeInterval = setInterval(getCompletedOrders, setIntervalTime);\n      } else {\n        let getCompletedOrders = () => {\n          let url = \"https://\" + window.location.hostname + \"/api/completed-orders\";\n          let payload = \n              {storeId: completedStoreId,\n              companyId: completedCompanyId};\n          axios({\n          url: url,\n          method: \"POST\",\n          data: payload,\n          })\n          .then((data) => {\n            if (window.location.pathname === \"/completed-orders\") {\n              let compCustData = data.data.data;\n                  compCustData.sort(function(a, b) {\n                      a = new Date(a.orderCompletedDate);\n                      b = new Date(b.orderCompletedDate);\n                      return a>b ? -1 : a<b ? 1 : 0;\n                  });\n              setCompletedCustomerData([...compCustData]);\n              setPageHasLoaded(true);\n            }  else {\n              clearInterval(completeInterval);\n            }\n          })\n          .catch((error) => {\n          console.log(\"getOrdersError: Internal server error:\", error);\n          });                                   \n          }\n          getCompletedOrders();\n        let completeInterval = setInterval(getCompletedOrders, setIntervalTime);\n      }\n    } else {\n        let getCompletedOrders = () => {\n          let url = \"http://localhost:8080/api/completed-orders\";  \n          let payload = \n              {storeId: completedStoreId,\n              companyId: completedCompanyId};\n          axios({\n          url: url,\n          method: \"POST\",\n          data: payload,\n          })\n          .then((data) => {\n            if (window.location.pathname === \"/completed-orders\") {  \n              console.log(\"data.data.data\", data.data.data)      \n              let compCustData = data.data.data;\n                  compCustData.sort(function(a, b) {\n                      a = new Date(a.orderCompletedDate);\n                      b = new Date(b.orderCompletedDate);\n                      return a>b ? -1 : a<b ? 1 : 0;\n                  });\n              setCompletedCustomerData([...compCustData]);\n              setPageHasLoaded(true);\n            }  else {\n              clearInterval(completeInterval);\n            }\n          })\n          .catch((error) => {\n          console.log(\"getOrdersError: Internal server error:\", error);\n          });                                  \n          }\n          getCompletedOrders();\n       let completeInterval = setInterval(getCompletedOrders, setIntervalTime);\n    }\n  }\n  }, [completedCompanyId, completedStoreId]);\n\n  // const updateCustomerList = (customers) => {\n  //   setCompletedCustomerData([...customers]);\n  // };\n\n  const renderLoadingBar = () => {\n    if (completedCustomerData.length === 0 && pageHasLoaded) {\n      return (\n        <div className=\"no-customer-que\">\n          No customers currently in the que\n        </div>\n        );\n    } else if (completedCustomerData.length === 0 && !pageHasLoaded) {\n      return (\n        <div>\n        <LoadingBar color=\"#dddddd\" />\n      </div>\n      );\n    } else if (Loading || !tableColumnHasLoaded) {\n      return (\n        <div>\n        <LoadingBar color=\"#dddddd\" />\n      </div>\n      );\n    } else {\n      return (\n        // table container\n        <div>\n        {completedCustomerData.map((p) => (\n          <div id={p._id} key={p._id} className=\"table-container col-5\">\n           {completedColumnIdsArray.map((value, index) =>\n              <div key={\"header_\" + index+1} className={\"table-item-header header-0\" + index}>\n                <p>{completedColumnCopy[value]}</p>\n              </div>\n              )} \n              {completedColumnIdsArray.map((value, index) =>\n                <StatusColumn key={value} p={p} setLoading={setLoading} columnAmount={index} value={value} index={index} completedCustomerData={completedCustomerData} setCompletedCustomerData={setCompletedCustomerData}/>\n            )} \n          </div>\n        ))}\n      </div>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <main>\n        <h1>Curbside Pickup Store #{props.storeId}</h1>\n        <h2>Clerk Name: <span className=\"clerk-color\">{props.fullName}</span></h2>\n        <h2>Username: <span className=\"clerk-color\">{props.username}</span></h2>\n        <p>These are all the customers that have completed their order pickup in the past 12 hours.</p>\n        <p>Click to add them back to the current pickups queue if needed.</p>\n        <br />\n        <div>\n        <div>{renderLoadingBar()}</div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default CompletedPickups;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\n\n// const storeInfo = {\n//   storeId: \"1337\",\n//   storeStatus: true,\n// };\n\nconst HomePage = (props) => { \n  const [storeStatus, setStoreStatus] = useState(\"\");\n  const [storeStatusLoading, setStoreStatusLoading] = useState(false);\n\n  const homeStoreId = props.storeId\n  const companyId = props.companyId\n\n  \n\n  useEffect(() => {\n    let payload = {\n      storeId: homeStoreId,\n      companyId: companyId\n    };\n    if (homeStoreId && companyId) {\n      axios({\n        url: \"/api/get-store-status\",\n        method: \"POST\",\n        data: payload,\n      })\n        .then((data) => {\n          console.log(\n            \"data.data.storeStatusPayload\",\n            JSON.stringify(data.data.storeStatusPayload)\n          );\n          updateStoreStatus(data.data.storeStatusPayload);\n        })\n        .catch((error) => {\n          console.log(\"getStoreStatus: Internal server error\");\n        });\n    }\n  }, [homeStoreId, companyId]);\n\n  const updateStoreStatus = (updatedStoreStatus) => {\n    setStoreStatus(updatedStoreStatus);\n    setStoreStatusLoading(true);\n  };\n\n  function changeStoreStatus(e) {\n    let payload = {\n      storeStatus: !storeStatus,\n      storeId: homeStoreId,\n      companyId: companyId\n    };\n    axios({\n      url: \"/api/update-store-status/\",\n      method: \"POST\",\n      data: payload,\n    })\n      .then((data) => {\n        console.log(\"Store status has been updated\");\n        setStoreStatus(payload.storeStatus);\n      })\n      .catch((error) => {\n        console.log(\"changeStoreStatus: Internal server error\");\n        // Put an alert to notify if there was an error\n      });\n  }\n\n  // Build out a component for the counter\n  const LoadingBar = (props) => {\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Loader type=\"ThreeDots\" color={props.color} height=\"100\" width=\"100\" />\n      </div>\n    );\n  };\n\n  const pauseButtonType = () => {\n    if (storeStatus) {\n      return (\n        <div>\n          <button onClick={changeStoreStatus} className=\"btn-pause\">\n            Pause curbside app for this store\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={changeStoreStatus} className=\"btn-resume\">\n            Resume curbside app for this store\n          </button>\n        </div>\n      );\n    }\n  };\n\n  const renderLoadingBar = () => {\n    if (storeStatusLoading) {\n      return <div>{pauseButtonType()}</div>;\n    } else {\n      return (\n        // table container\n        <div>\n          <LoadingBar color=\"#dddddd\" />\n        </div>\n      );\n    }\n  };\n\n\n  return (\n    <div>\n      <main>\n        <h1>Curbside Pickup Store #{props.storeId}</h1>\n        <p>Real time updates as customers are outside your&nbsp;store.</p>\n        <div>{renderLoadingBar()}</div>\n      </main>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\n  // Build out a component for the counter\n  const LoadingBar = (props) => {\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Loader type=\"ThreeDots\" color={props.color} height=\"100\" width=\"100\" />\n      </div>\n    );\n  };\n\n\n  export default LoadingBar;","import React, { useState, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\nimport { CSVLink } from \"react-csv\";\nimport LoadingBar from  \"./loadingBar\"\n// import \"../css/admin.css\";\n\n// TODO: Add in copy to let them know they have either enabled or disabled notificaions already\nconst EnableNotifications = (props) => {\n  if (\n    Notification.permission !== \"denied\" &&\n    Notification.permission !== \"granted\"\n  ) {\n    return (\n      <div>\n        <h2>Enable Browser Notifications for Current Queue</h2>\n        <p>\n          Click to allow browser notifications. These can be set in browser\n          setttings as well.\n        </p>\n        <button\n          type=\"button\"\n          className=\"btn-start\"\n          onClick={props.changeNotificationStatus}\n          aria-label=\"Enable Notifications\"\n        >\n          Enable Notifications\n        </button>\n      </div>\n    );\n  } else {\n  }\n  return <div></div>;\n};\n\nconst SendPwResteEmailButton = (props) => {\n  if (props.pwResetEmailSentStatus) {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          className=\"btn-started\"\n          aria-label=\"Reset Password\"\n        >\n          Reset email has been sent\n        </button>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          className=\"btn-start\"\n          aria-label=\"Reset Password\"\n          onClick={props.sendPWResetEMail}\n        >\n          Send Email\n        </button>\n      </div>\n    );\n  }\n};\n\nconst ErrorMessageDisplay = (props) => {\n  if (props.usernameErrorMessage) {\n      return (\n      <ul>\n      <li className=\"signin-error-message\">{props.usernameErrorMessage} </li>\n      </ul>\n      )\n    } else {\n      return (\n      <div></div>\n      )\n    }\n  }\n\nconst SuccessMessageDisplay = (props) => {\n  if (props.usernameSuccessMessage) {\n      return (\n      <ul>\n      <li className=\"signin-success-message\">{props.usernameSuccessMessage} </li>\n      </ul>\n      )\n    } else {\n      return (\n      <div></div>\n      )\n    }\n  }  \n\nconst DeleteProfileButton = (props) => {\n if (props.username === props.currentUsername) {\n  return (\n    <button id={props.username} type=\"button\" className=\"btn-started\" aria-label=\"Delete\">Delete Profile</button>\n  ) \n } else {\n  return (\n    <button id={props.username} type=\"button\" className=\"btn-pickedup\" aria-label=\"Delete\" onClick={props.confirmDelete}>Delete Profile</button>\n  )\n }\n}\n\n\n\nconst AddProfile = (props) => {\n  const submitProfile = () => {\n    const payload = {\n      username: props.newUserData.newUsername,\n      fullName: props.newUserData.newUserFullName,\n      email: props.newUserData.newUserEmail,\n      companyId: props.adminCompanyId,\n      storeId: props.adminStoreId,\n      userRoleType: \"standard\"\n    };\n    axios({\n      url: \"/api/add-store-user\",\n      method: \"POST\",\n      data: payload,\n    })\n      .then((data) => {\n        console.log(\"data:\", JSON.stringify(data.data.message));\n        props.setUsernameSuccessMessage(data.data.message);\n        let tempStoreUsers = props.storeUsers;\n        tempStoreUsers.push(payload);\n        console.log(\"usernameSuccessMessage:\", props.usernameSuccessMessage)\n        props.setStoreUsers([...tempStoreUsers]);\n            let resetPayload = {\n              username: props.newUserData.newUsername\n            }\n          axios({\n              url: \"/api/reset-password-email\",\n              method: \"POST\",\n              data: resetPayload,\n            })\n              .then((data) => {\n                console.log(data);\n              })\n              .catch((error) => {\n                console.log(\"Send reset passsword email error: \", error);\n              });\n      })\n      .catch((error) => {\n        console.log(\"Add new user error: Internal server error: \", error);\n        props.setUsernameErrorMessage(error.response.data.message);\n        // console.log(\"Add new user error: Internal server error: \", error.response.data.message);\n        // Put an alert to notify if there was an error\n      });\n  }\n  \n  const handleUserChange = evt => {\n    const name = evt.target.name;\n    const newValue = evt.target.value;\n    props.setNewUserData({[name]: newValue});\n    } \n\n  const resetProfileFields = () => {\n    props.setUsernameErrorMessage(\"\");\n    props.setUsernameSuccessMessage(\"\");\n  }\n  \n  if(props.storeUsers.length >= 5) {\n    return (\n      <div className=\"help-container\">\n      <h2>Add A Profile</h2>\n      <p>You are currently at your 5 profile limit and not able to add more profiles at this time. To add another profile, you must remove a profile above.</p>\n      </div>\n    ) } else {\n      return (\n        <div>\n        <div className=\"help-container\">\n        <h2>Add A Profile (Limit 5)</h2>\n        <p>A temprary password will be set and a password reset email will be sent to the email address you give below.</p>\n        </div>\n        <div id=\"addProfile\">\n        <form action=\"\" id=\"updatePassword\" className=\"form-update\">\n            <div>\n                <label htmlFor=\"newUsername\">Username</label>\n                <input type=\"text\" id=\"newUsername\" name=\"newUsername\" aria-label=\"Username\" onChange={handleUserChange}/>\n            </div>\n            <div>\n                <label htmlFor=\"newUserFullName\">Name</label>\n                <input type=\"name\" id=\"newUserFullName\" name=\"newUserFullName\" aria-label=\"Username\" onChange={handleUserChange}/>\n            </div>\n            <div>\n                <label htmlFor=\"newUserEmail\">Email</label>\n                <input type=\"email\" id=\"newUserEmail\" name=\"newUserEmail\" aria-label=\"Email\" onChange={handleUserChange} />\n            </div>\n            <ErrorMessageDisplay usernameErrorMessage ={props.usernameErrorMessage}/>\n            <SuccessMessageDisplay usernameSuccessMessage ={props.usernameSuccessMessage}/>\n            <button type=\"button\" className=\"btn-start\" aria-label=\"Add A Profile\" onClick={submitProfile}>+ Profile</button>\n            <button type=\"reset\" className=\"btn-pickedup\" aria-label=\"Reset\" onClick={resetProfileFields}>Reset</button>\n        </form>\n    </div>\n    </div>\n      )\n    }\n}\n\nconst Admin = (props) => {\n  const [historicalData, setHistoricalData] = useState(\"\");\n  const [storeUsers, setStoreUsers] = useState([]);\n  const [storeUsersLoaded, setStoreUsersLoaded] = useState(false);\n  const [pwResetEmailSentStatus, setPwResetEmailSentStatus] = useState(false);\n  const [usernameErrorMessage, setUsernameErrorMessage] = useState(\"\");\n  const [usernameSuccessMessage, setUsernameSuccessMessage] = useState(\"\");\n  const [newUserData, setNewUserData] = useReducer(\n\t\t(state, newState) => ({...state, ...newState}),\n      {\n        newUsername: '',\n        newUserFullName: '',\n        newUserEmail: ''\n      }\n\t  );\n  \n  const adminFullName = props.fullName\n  const adminStoreId = props.storeId\n  const adminCompanyId = props.companyId\n  const adminUsername = props.username\n  const userRoleType = props.userRoleType\n  \n  console.log(\"newUserData:\", newUserData);\n  \n  useEffect(() => {\n    if (adminCompanyId && adminCompanyId) {\n      let payload = {\n        storeId: adminStoreId,\n        companyId: adminCompanyId\n      }\n      axios({\n          url: \"/api/get-store-users\",\n          method: \"POST\",\n          data: payload,\n        })\n          .then((data) => {\n            console.log(\n              \"data:\",\n              JSON.stringify(data.data.userData)\n            );\n            setStoreUsers(data.data.userData);\n            setStoreUsersLoaded(true)\n          })\n          .catch((error) => {\n            console.log(\"getStoreStatus: Internal server error:\", error);\n            setStoreUsersLoaded(true)\n          });\n    } \n  }, [adminStoreId,adminCompanyId ]);\n\n  const changeNotificationStatus = () => {\n    Notification.requestPermission()\n    console.log(\"notification updates\")\n  }\n\n  const sendPWResetEMail = () => {\n    setPwResetEmailSentStatus(true);\n    let payload = {\n      username: adminUsername\n      }\n      axios({\n          url: \"/api/reset-password-email\",\n          method: \"POST\",\n          data: payload,\n        })\n          .then((data) => {\n            console.log(data)\n            setTimeout(function () {\n              setPwResetEmailSentStatus(false);\n            }, 60000);\n\n          })\n          .catch((error) => {\n            console.log(\"Send reset passsword email error: \", error);\n          });\n  }\n\n \n\n  const confirmDelete = (e) => {\n    let deleteUsername = e.target.id;\n    console.log(\"deleteUsername:\", deleteUsername)\n    if (window.confirm(\"Confirm that you want to delete user: \" + deleteUsername)) {\n      let payload = {\n      username: deleteUsername\n      }\n      axios({\n          url: \"/api/delete-store-user\",\n          method: \"POST\",\n          data: payload,\n        })\n          .then((data) => {\n            console.log(\n              \"data:\",\n              JSON.stringify(data.data.userData)\n            );\n            let deleteUserFindIndex = (element) => element.username === deleteUsername;\n            console.log(\"deleteUserFindIndex\")\n           \n            let deleteUserIndex = storeUsers.findIndex(deleteUserFindIndex);\n            let tempStoreUsers = storeUsers\n            // let deleteUserIndex = tempStoreUsers.findIndex(deleteUserFindIndex);\n            tempStoreUsers.splice(deleteUserIndex, 1);\n            console.log(tempStoreUsers)\n            // let updatedUserArray = storeUsers.splice(deleteUserIndex, 1);\n            // let updatedUserArray = storeUsers.filter(item => item.username !== deleteUsername)\n            // setStoreUsers(updatedUserArray);\n            setStoreUsers([...tempStoreUsers]);\n            setStoreUsersLoaded(true)\n            console.log(\"storeUsers:\", storeUsers)\n\n\n          })\n          .catch((error) => {\n            console.log(\"getStoreStatus: Internal server error:\", error);\n            setStoreUsersLoaded(true)\n          });\n  }\n}\n\n  const downloadReport = (e) => {\n    let payload = {\n      storeId: adminStoreId,\n      companyId: adminCompanyId\n    };\n    axios({\n      url: \"/api/report-all-data\",\n      method: \"POST\",\n      data: payload,\n    })\n      .then((data) => {\n        console.log(\"data:\", JSON.stringify(data.data.data));\n        setHistoricalData(data.data.data);\n        document.getElementById(\"csvLinkButton\").click();\n      })\n      .catch((error) => {\n        console.log(\"changeStoreStatus: Internal server error\");\n        // Put an alert to notify if there was an error\n      });\n  }\n\n  const SuperUserLevelUser = (props) => {\n    if (userRoleType === \"superUser\") {\n      return (\n        <div id=\"statusLevel02\">\n        <div className=\"help-container\">\n            <h2>Company Info:</h2>\n            <p>See all companies using the app</p>\n            <a href=\"\"><button type=\"button\" className=\"btn-start\">Click to show</button></a>\n        </div>\n        </div>\n      )\n    } else {\n      return (\n        <div></div>\n      )\n    }\n    \n  }\n\n  const AdminLevelUser = (props) => {\n    if (userRoleType === \"superUser\" || userRoleType === \"admin\") {\n    return (\n      <div id=\"statusLevel02\">\n          <div>\n            <h2>Current Store Users</h2>\n            <p style={{padding:\"0px 0px 15px 0px\"}}>These are all the current users for your store:</p>\n          </div>\n          {storeUsers.map((p, index) => (\n              <div key={\"user_\" + index} className=\"table-container-profile\">\n                  <div className=\"table-item-header-profile header-01-profile\"><p>Username</p></div>\n                  <div className=\"table-item-header-profile header-02-profile\"><p>Full Name</p></div>\n                  <div className=\"table-item-header-profile header-03-profile\"><p>Email Address</p></div>\n                  <div className=\"table-item-header-profile header-04-profile\"><p>Password</p></div>\n                  <div className=\"table-item-header-profile header-05-profile\"><p>&nbsp;</p></div>\n              \n                  <div className=\"table-item-profile table-item-01-profile\"><p>{p.username}</p></div>\n                  <div className=\"table-item-profile table-item-02-profile\"><p>{p.fullName}</p></div>\n                  <div className=\"table-item-profile table-item-03-profile\"><p>{p.email}</p></div>\n                  <div className=\"table-item-profile table-item-04-profile\"><p>••••••••••</p></div>\n                  <div className=\"table-item-profile table-item-05-profile\">\n                    <DeleteProfileButton username={p.username} confirmDelete={confirmDelete} currentUsername={adminUsername}/>\n                  </div>\n              </div>\n            ))}\n\n              <div className=\"help-container\">\n                <AddProfile adminStoreId={adminStoreId} adminCompanyId={adminCompanyId} setUsernameErrorMessage={setUsernameErrorMessage} setUsernameSuccessMessage={setUsernameSuccessMessage} newUserData={newUserData} setNewUserData={setNewUserData} usernameErrorMessage={usernameErrorMessage} usernameSuccessMessage={usernameSuccessMessage} storeUsers={storeUsers} setStoreUsers={setStoreUsers}/>\n              </div>\n\n              \n\n          </div>\n    )} else {\n        return (\n          <div>\n          </div>\n        )\n  }\n}\n\n  const StandardLevelUser = (props) => {\n    if (userRoleType === \"standard\" || userRoleType === \"superUser\" || userRoleType === \"admin\") {\n    return (\n      <div id=\"statusLevel01\">\n      <EnableNotifications changeNotificationStatus={changeNotificationStatus}/>\n      <div>\n          <h2>Update Your Password</h2>\n          <p>Send yourself a password reset email:</p>\n          <SendPwResteEmailButton pwResetEmailSentStatus={pwResetEmailSentStatus} sendPWResetEMail={sendPWResetEMail}  />\n      </div>\n\n      <div>\n          <h2>Download Historical Data</h2>\n          <p style={{padding:\"0px 0px 15px 0px\"}}>Historical pickup data from the last 7 days:</p>\n          <button type=\"button\" className=\"btn-start\" onClick={downloadReport}>Download data</button>\n            <CSVLink\n            id=\"csvLinkButton\"\n            filename={\"my-file.csv\"}\n            target=\"_blank\" \n            data={historicalData}  \n            filename=\"historical_data.csv\"\n            className=\"btn-start\"\n            style={{display:'none'}}\n           >\n          </CSVLink>\n      </div>\n\n      <div className=\"help-container\">\n          <h2>Need Help?</h2>\n          <p>Use our help documenation:</p>\n          <a href=\"\"><button type=\"button\" className=\"btn-start\">Download help guide</button></a>\n      </div>\n\n  </div>\n    )\n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n\n  if (!userRoleType || !storeUsersLoaded) {\n    return (\n      <div>\n      <main>\n            <LoadingBar color=\"#dddddd\" />\n        </main>\n      </div>\n    )\n  } else if (userRoleType === \"superUser\" || userRoleType === \"admin\") {\n    return (\n      <div>\n      <div className=\"admin-container\">\n      <div className=\"admin-info\">\n          <h2 className=\"clerk-color txt-center\">{adminFullName}</h2>\n          <h2 className=\"txt-center\">User Role Level:<br /><span className=\"clerk-color\">{userRoleType}</span></h2>\n          {/* <!--status level standard--> */}\n         <StandardLevelUser />\n          {/* <!--status level admin--> */}\n          <AdminLevelUser />\n          {/* <!--status level superUser--> */}\n          <SuperUserLevelUser />\n\n      </div>\n  </div>\n  </div>\n    );\n  } else {\n    return (<div>\n      You do not have access rights for this page\n    </div>\n    )\n  }\n};\n\nexport default Admin;","import React from \"react\";\n// import \"../css/admin.css\";\n\n\nconst Logout = (props) => {\n  \n  return (\n    <div>\n  </div>\n  );\n};\n\nexport default Logout;\n","import React, { useReducer} from 'react';\nimport axios from \"axios\";\nimport { createBrowserHistory } from \"history\";\nimport shawScottLogo from '../img/ShawScott_Logo_Gradient.png';\n\nconst appHistory = createBrowserHistory();\n\n\nconst SignInPage = (props) => {\n\n\tconst [userLoginData, setUserLoginData] = useReducer(\n\t\t(state, newState) => ({...state, ...newState}),\n\t\t{\n\t\tloginUserName: '',\n\t\tloginUserPassword: '',\n\t\tloginErrorMessage: ''\n\t\t}\n\t  );\n\n\tconst handleChange = evt => {\n\tconst name = evt.target.name;\n\tconst newValue = evt.target.value;\n\tsetUserLoginData({[name]: newValue});\n\t}  \n\n\tconst handleLogin = (event) => {\n\t\tevent.preventDefault()\n\t\t// Slight delay to prevent brute force attacks\n\t\tsetTimeout(function(){ \n\t\t\tconst payload = {\n\t\t\t\tusername: userLoginData.loginUserName,\n\t\t\t\tpassword: userLoginData.loginUserPassword\n\t\t\t};\n\t\t\taxios({\n\t\t\t  url: \"/api/account/signin\",\n\t\t\t  method: \"POST\",\n\t\t\t  data: payload,\n\t\t\t})\n\t\t\t  .then((data) => {\n\t\t\t\tconsole.log(JSON.stringify(data));\n\t\t\t\tconsole.log(\"username\", data.data.username);\n\t\t\t\tconsole.log(\"token\", data.data.token);\n\t\t\t\tconsole.log(\"message\", data.data.message);\n\t\t\t\twindow.localStorage.setItem('jwt', data.data.token)\n\t\t\t\tlet errorMessage = data.data.message;\n\t\t\t\t\n\t\t\t\tif (data.data.token) {\n\t\t\t\t\tappHistory.push(\"/home\");\n\t\t\t\t\tappHistory.go();\n\t\t\t\t} else {\n\t\t\t\t\tsetUserLoginData({[\"loginErrorMessage\"]: errorMessage});\n\t\t\t\t}\n\t\t\t  })\n\t\t\t  .catch((error) => {\n\t\t\t\tconsole.log(\"getStoreStatus: Internal server error\");\n\t\t\t  });\n\t\t}, 100);\n\t}\n\t\t\n\t  const ErrorMessageDisplay = () => {\n\t\tif (userLoginData.loginErrorMessage) {\n\t\t\t  return (\n\t\t\t\t<ul>\n\t\t\t\t<li className=\"signin-error-message\">{userLoginData.loginErrorMessage} </li>\n\t\t\t  </ul>\n\t\t\t  )\n\t\t  } else {\n\t\t\t  return (\n\t\t\t\t<div></div>\n\t\t\t  )\n\t\t  }\n\t  }\n\t\n\t\n\treturn (\n\t\t<div id=\"signin-body\">\n\t\t\t<div id=\"signin-container\"> \n\t\t\t\t<div id=\"signin-app\">\n\t\t\t\t<img src={shawScottLogo} alt=\"shaw scott Logo\" className=\"signin-logo\" />\n\t\t\t\t<form method=\"POST\" action=\"\" className=\"signin-form\" onSubmit={handleLogin} id=\"siginForm\">\n\t\t\t\t\t<div className=\"signin-form-container\">\n\t\t\t\t\t\t<div className=\"signin-item-1\">\n\t\t\t\t\t\t<input type=\"text\" name=\"loginUserName\" value={userLoginData.loginUserName} placeholder=\"Username\" onChange={handleChange}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"signin-item-1\">\n\t\t\t\t\t\t<input type=\"password\" name=\"loginUserPassword\" value={userLoginData.loginUserPassword} placeholder=\"Password\"  onChange={handleChange}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"signin-item-1 signin-error-container\">\n\t\t\t\t\t\t\t<p className=\"signin-p\"><a href=\"/forgot-password\"  className=\"signin-forgot\">Forgot password?</a></p>\n\t\t\t\t\t\t\t<ErrorMessageDisplay />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"signin-item-1\">\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"signin-button signin-btn\" id=\"next\" value=\"next\">SIGN IN</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</form> \n\t\t\t\t</div>\n\t\t\t\t<div className=\"signin-footer\">\n\t\t\t\t\t<p className=\"signin-p\">&copy;2020 All rights reserved.<br />Shaw / Scott</p>\n\t\t\t\t</div>  \n\t\t\t</div>\n\t\t</div>\t\n  );\n};\n\nexport default SignInPage;","import React from \"react\";\n// import \"../css/admin.css\";\n\n\nconst PageNotFound = (props) => {\n  \n  return (\n    <div>\n    <h1>Sorry that page does not exist</h1>\n  </div>\n  );\n};\n\nexport default PageNotFound;","import React, { useReducer, useEffect} from 'react';\nimport axios from \"axios\";\nimport shawScottLogo from '../img/ShawScott_Logo_Gradient.png';\nimport Loader from \"react-loader-spinner\";\n\n// Build out a component for the loader\nconst LoadingBar = (props) => {\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Loader type=\"ThreeDots\" color={props.color} height=\"100\" width=\"100\" />\n      </div>\n    );\n  };\n// Disaply error messages if any\nconst ErrorMessageDisplay = ({resetPasswordData}) => {\n\tif (resetPasswordData.resetErrorMessage) {\n\t\t  return (\n\t\t\t<ul>\n\t\t\t<li v-for=\"error in errors\" className=\"signin-error-message\">{resetPasswordData.resetErrorMessage} </li>\n\t\t  </ul>\n\t\t  )\n\t  } else {\n\t\t  return (\n\t\t\t<div></div>\n\t\t  )\n\t  }\n  }\n\n  const VerifyTokenDiplay = ({resetPasswordData, setResetPasswordData}) => {\n\tconst handleChange = evt => {\n\t\tconst name = evt.target.name;\n\t\tconst newValue = evt.target.value;\n\t\tsetResetPasswordData({[name]: newValue});\n\t\tsetResetPasswordData({['inputFocus']: name});\n\t}  \n\n\tif (resetPasswordData.tokenVerified && !resetPasswordData.passwordUpdated) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t<div className=\"text-container\">\n\t\t\t\t<p className=\"signin-p\">Enter new password below:</p>\n\t\t\t</div>\n\t\t\t<div className=\"signin-form-container\">\n\t\t\t\t<div className=\"signin-item-1\">\n\t\t\t\t\t<input key=\"newPassword\" className=\"signin-input\" type=\"password\" name=\"newPassword\" value={resetPasswordData.newPassword} placeholder=\"New password\" onChange={handleChange} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"signin-item-1\">\n\t\t\t\t\t<input key=\"confirmNewPassword\" className=\"signin-input\" type=\"password\" name=\"confirmNewPassword\" value={resetPasswordData.confirmNewPassword} placeholder=\"Confirm new password\" onChange={handleChange} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"signin-item-1 signin-error-container\">\n\t\t\t\t\t<ErrorMessageDisplay resetPasswordData={resetPasswordData}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"signin-item-1\">\n\t\t\t\t\t<button type=\"submit\" className=\"signin-button signin-btn-resend\" id=\"next\" value=\"next\">Save new password</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\t\n\t\t  );\n\t  } else if (!resetPasswordData.tokenLoaded) {\n\t\treturn (\n\t\t\t <div>\n\t\t\t\t  <LoadingBar color=\"#dddddd\" />\n\t\t\t</div>\n\t\t  );\n\t  } else if (resetPasswordData.passwordUpdated) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"text-container txt-center\">\n\t\t\t\t\t<p className=\"signin-p\">Your password has been updated successfully.</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"signin-item-1\">\n\t\t\t\t\t<a href=\"/signin\"><button type=\"button\" className=\"signin-button signin-btn-resend\">Back to signin page</button></a>\n\t\t\t\t</div> \n\t\t\t</div>\n\t\t\t)\n\t  } \n\t  else {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"text-container txt-center\">\n\t\t\t\t\t\t<p className=\"signin-p\">Link is invalid or has expired. Please try again.</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"signin-item-1\">\n\t\t\t\t\t<a href=\"/signin\"><button type=\"button\" className=\"signin-button signin-btn-resend\">Back to signin page</button></a>\n\t\t\t\t</div>\n\t\t\t</div> \n\t\t  );\n\t  }\n  }\n\nconst ResetPasswordPage = (props) => {\n\n\tconst [resetPasswordData, setResetPasswordData] = useReducer(\n\t\t(state, newState) => ({...state, ...newState}),\n\t\t{\n\t\tnewPassword: '',\n\t\tconfirmNewPassword: '',\n\t\tresetErrorMessage:'',\n\t\tpasswordResetToken:'',\n\t\ttokenVerified: false,\n\t\ttokenLoaded: false,\n\t\tpasswordUpdated: false\n\t\t}\n\t\t);\n\tconst params = new URLSearchParams(window.location.search);\n\tif (params.has(\"rt\") && !resetPasswordData.passwordResetToken) {\n\t\tsetResetPasswordData({passwordResetToken: params.get('rt')}); \n\t}\n\n\tuseEffect(() => {\n\t\tif (resetPasswordData.passwordResetToken) {\n\t\tlet payload = {\n\t\t\ttoken: resetPasswordData.passwordResetToken,\n\t\t\t};\n\t\t\n\t\taxios({\n\t\turl: \"/api/account/reset-auth\",\n\t\tmethod: \"POST\",\n\t\tdata: payload,\n\t\t})\n\t\t.then((data) => {\n\t\t\tif (data.data.success) {\n\t\t\t\tsetResetPasswordData({[\"tokenVerified\"]: true});\n\t\t\t\tsetResetPasswordData({[\"tokenLoaded\"]: true});\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tsetResetPasswordData({[\"tokenLoaded\"]: true});\n\t\t});\n\t}\n\t}, [resetPasswordData.passwordResetToken]);\n\n\tconst handleResetPasswordSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\t// TODO Add in a length / charcter requirment for the new password\n\t\t// TODO Add in a requirment that new password can not be the same as old password\n\t\tif (!resetPasswordData.confirmNewPassword || !resetPasswordData.newPassword) {\n\t\t\tsetResetPasswordData({[\"resetErrorMessage\"]: \"Passwords must not be empty\"});\n\t\t\treturn\n\t\t}\n\t\tif (resetPasswordData.confirmNewPassword !== resetPasswordData.newPassword) {\n\t\t\tsetResetPasswordData({[\"resetErrorMessage\"]: \"Passwords must match\"});\n\t\t\treturn\n\t\t}\n\n\t\tlet payload = {\n\t\t\ttoken: resetPasswordData.passwordResetToken,\n\t\t\tnewPassword: resetPasswordData.confirmNewPassword\n\t\t\t};\n\n\t\taxios({\n\t\t  url: \"/api/account/reset-password\",\n\t\t  method: \"POST\",\n\t\t  data: payload,\n\t\t})\n\t\t  .then((data) => {\n\t\t\tconsole.log(\"data:\", JSON.stringify(data));\n\t\t\tconsole.log(\"data end:\");\n\t\t\tlet errorMessage = data.data.message;\n\t\t\tif (data.data.success) {\n\t\t\t\tsetResetPasswordData({[\"passwordUpdated\"]: true});\n\t\t\t\tconsole.log(\"success: true\")\n\t\t\t} else {\n\t\t\t\tsetResetPasswordData({[\"resetErrorMessage\"]: errorMessage});\n\t\t\t}\n\t\t  })\n\t\t  .catch((error) => {\n\t\t\tconsole.log(error)\n\t\t\tif (error.message.includes(\"401\")) {\n                setResetPasswordData({[\"tokenVerified\"]: false});\n            } else if (error.message.includes(\"500\")){\n                setResetPasswordData({[\"resetErrorMessage\"]: \"Internal server error. Please try again.\"});\n\t\t\t}else {\n               setResetPasswordData({[\"resetErrorMessage\"]: error.response.data.message}); \n\t\t\t}\n\t\t\t\n\t\t  });\n\t  };\n\t  return (\n\t\t<div id=\"signin-body\">\n\t\t<div id=\"signin-container\"> \n\t\t\t<div id=\"signin-app\">\n\t\t\t<img src={shawScottLogo} alt=\"shaw scott Logo\" className=\"signin-logo\" />\n\t\t\t<form method=\"POST\" action=\"\" className=\"signin-form\" onSubmit={handleResetPasswordSubmit}>\n\t\t\t<VerifyTokenDiplay resetPasswordData={resetPasswordData} setResetPasswordData={setResetPasswordData}/>\n\t\t\t</form> \n\t\t\t</div>\n\t\t\t<div className=\"signin-footer\">\n\t\t\t\t<p className=\"signin-p\">&copy;2020 All rights reserved.<br />Shaw / Scott</p>\n\t\t\t</div>  \n\t\t</div>\n\t</div>\t\n\n\t\t\n\t  )\n};\n\nexport default ResetPasswordPage;","import React, { useReducer} from 'react';\nimport axios from \"axios\";\nimport shawScottLogo from '../img/ShawScott_Logo_Gradient.png';\nimport Loader from \"react-loader-spinner\";\n\n\n// Build out a component for the loading screen\nconst LoadingBar = (props) => {\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Loader type=\"ThreeDots\" color={props.color} height=\"100\" width=\"100\" />\n      </div>\n    );\n  };\n// Display any error messages if present\nconst ErrorMessageDisplay = ({forgotPasswordData}) => {\nif (forgotPasswordData.errorMessage) {\n    return (\n        <ul>\n            <li className=\"signin-error-message\">{forgotPasswordData.errorMessage} </li>\n        </ul>\n        )\n    } else {\n        return (\n        <div></div>\n        )\n    }\n}\n\n// Display different copy depending on if email has been sent or not\nconst PasswordResetConfirmation = ({forgotPasswordData, setForgotPasswordData}) => {\n  \n  const handleChange = event => {\n      const name = event.target.name;\n      const newValue = event.target.value;\n      setForgotPasswordData({[name]: newValue});\n  }  \n    \n    if (forgotPasswordData.passwordEmailSent) {\n        return (\n            <div className=\"text-container\">\n                <p className=\"signin-p\">A password reset email has been sent. Please check your inbox.</p>\n            </div>\n          );\n    } else if (forgotPasswordData.resetEmailLoading) {\n        return (\n             <div id=\"resetEmailLoading\">\n                <LoadingBar color=\"#dddddd\" />\n            </div>\n          );\n      } else {\n        return (\n            <div>\n                <div className=\"text-container\">\n\t\t\t        <p className=\"signin-p\">Enter your username below to send yourself a password reset email:</p>\n\t\t        </div>\n                <div className=\"signin-form-container\">\n                    <div className=\"signin-item-1\">\n                        <input key=\"forgotPasswordEmailInput\" id=\"forgotPasswordEmailInput\" className=\"signin-input\" type=\"text\" name=\"username\" value={forgotPasswordData.username} placeholder=\"Username\" onChange={handleChange} />\n                    </div>\n                    <div className=\"signin-item-1 signin-error-container\">\n                        <ErrorMessageDisplay forgotPasswordData={forgotPasswordData}/>\n                    </div>\n                    <div className=\"signin-item-1\">\n                        <button type=\"submit\" className=\"signin-button signin-btn-resend\" id=\"next\" value=\"next\">Send password reset email</button>\n                    </div>\n                </div>\n            </div>\n          );\n    }\n}\n\nconst ForgotPassword = (props) => {\n\tconst [forgotPasswordData, setForgotPasswordData] = useReducer(\n\t\t(state, newState) => ({...state, ...newState}),\n\t\t{\n        username: '',\n        errorMessage:'',\n        passwordEmailSent: false,\n        resetEmailLoading: false\n\t\t}\n      );\n\tconst handleForgotPassword = (event) => {\n        event.preventDefault();\n        setForgotPasswordData({[\"resetEmailLoading\"]: true});\n\t\tconst payload = {\n\t\t\tusername: forgotPasswordData.username\n\t\t};\n\t\taxios({\n\t\t  url: \"/api/account/forgot-password\",\n\t\t  method: \"POST\",\n\t\t  data: payload,\n\t\t})\n\t\t  .then((data) => {\n\t\t\tconsole.log(\"data\", JSON.stringify(data));\n            let errorMessageCopy = data.data.message;\n\t\t\tif (data.data.success) {\n\t\t\t\tsetForgotPasswordData({[\"passwordEmailSent\"]: true});\n            } \n            setForgotPasswordData({[\"resetEmailLoading\"]: false});\n\t\t  })\n\t\t  .catch((error) => {\n            console.log(\"Error:\", JSON.stringify(error.message));\n            if (error.message.includes(\"400\")) {\n                setForgotPasswordData({[\"errorMessage\"]: \"Email address required\" });\n            } else if (error.message.includes(\"403\")) {\n                setForgotPasswordData({[\"errorMessage\"]: \"Email address not on record\" });\n            } else {\n                setForgotPasswordData({[\"errorMessage\"]: \"Internal server error please try again\" });\n            }\n            setForgotPasswordData({[\"resetEmailLoading\"]: false});\n\t\t  });\n      };\n\t\n\n        return (\n            <div id=\"signin-body\">\n                <div id=\"signin-container\"> \n                    <div id=\"signin-app\">\n                    <img src={shawScottLogo} alt=\"shaw scott Logo\" className=\"signin-logo\" />\n                    <form method=\"POST\" action=\"\" className=\"signin-form\" onSubmit={handleForgotPassword}>\n                    <PasswordResetConfirmation forgotPasswordData={forgotPasswordData} setForgotPasswordData={setForgotPasswordData}/>\n                    </form> \n                    </div>\n                    <div className=\"signin-footer\">\n                        <p className=\"signin-p\">&copy;2020 All rights reserved.<br />Shaw / Scott</p>\n                    </div>  \n                </div>\n            </div>\t\n         );\n};\n\nexport default ForgotPassword;","import React, { useEffect, useState, useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport axios from \"axios\";\nimport CurrentPickups from \"./currentPickups\";\nimport CompletedPickups from \"./completedPickups\";\nimport HomePage from \"./home\";\nimport Admin from \"./admin\";\nimport Logout from \"./logout\";\nimport SignInPage from \"./signIn\";\nimport PageNotFound from \"./pageNotFound\";\nimport ResetPassword from \"./resetPassword\"\nimport ForgotPassword from \"./forgotPassword\"\n\nconst appHistory = createBrowserHistory();\n\nexport const AuthContext = React.createContext({});\n\nconst Loading = () => {\n  return <div></div>;\n};\n\nconst Auth = ({ children }) => {\n  const jwtToken = window.localStorage.jwt;\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [storeId, setStoreId] = useState(\"\");\n  const [companyId, setCompanyId] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\");\n  const [username, setUsername] = useState(\"\");  \n  const [userRoleType, setUserRoleType] = useState(\"\");\n\n  useEffect(() => {\n    axios({\n      url: \"api/account/auth\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        authorization: `Bearer ${jwtToken}`\n      },\n    })\n      .then((data) => {\n        setIsAuthenticated(true);\n        setIsLoading(false);\n        setStoreId(data.data.storeId);\n        setCompanyId(data.data.companyId);\n        setFullName(data.data.fullName);\n        setUsername(data.data.username);\n        setUserRoleType(data.data.userRoleType);\n\n      })\n      .catch((error) => {\n        console.log(\"Token auth error:\", error);\n        setIsAuthenticated(false);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, isLoading,  storeId, userRoleType, companyId, username, fullName }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n\nconst TopNav = (storeId,isAuthenticated,username, userRoleType, companyId, fullName) => {\n \n  // Toggle between adding and removing the \"responsive\" class to topnav when the user clicks on the icon\n  const mobileMenuClose = () => {\n    document.getElementById(\"menu-open\").checked = false;\n  };\n\n  // Refresh the page for these routes so the sse connection doesnt get stale\n  const refreshNowPage = () => {\n    // const history = useHistory();\n    appHistory.push(\"/current-orders\");\n    appHistory.go();\n    // console.log(window.location.href);\n  };\n  const refreshTodayPage = () => {\n    // const history = useHistory();\n    appHistory.push(\"/completed-orders\");\n    appHistory.go();\n    // console.log(window.location.href);\n  };\n\n  const logout = () => {\n    localStorage.clear(\"jwt\");\n    appHistory.push(\"/signin\");\n    appHistory.go();\n  };\n\n  const FullNavBar = () => {\n    return (\n     <div>\n     <div className=\"header\">\n      <div className=\"login\" onClick={mobileMenuClose}>\n        <NavLink\n          onClick={logout}\n          to=\"/logout\"\n          activeClassName=\"active-nav\"\n        >\n          Logout\n        </NavLink>\n      </div>\n    </div>\n    <input type=\"checkbox\" className=\"menu-open\" id=\"menu-open\" />\n    <label htmlFor=\"menu-open\" className=\"icon-toggle\">\n      <div className=\"spinner diagonal part-1\"></div>\n      <div className=\"spinner horizontal\"></div>\n      <div className=\"spinner diagonal part-2\"></div>\n    </label>\n    <div id=\"menu\" onClick={mobileMenuClose}>\n      <ul className=\"sidebarMenuInner\">\n        <li>\n          <NavLink to=\"/home\" activeClassName=\"active-nav\">\n            Home\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            to=\"/current-orders\"\n            activeClassName=\"active-nav\"\n            onClick={refreshNowPage}\n          >\n            Current Orders\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            to=\"/completed-orders\"\n            activeClassName=\"active-nav\"\n            onClick={refreshTodayPage}\n          >\n            Completed Orders\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/admin\" activeClassName=\"active-nav\">\n            Admin\n          </NavLink>\n        </li>\n      </ul>\n    </div>\n    </div>\n    )\n  }\n\n  function AuthenticatedRoute({ component: Component, ...rest }) {\n    const { isAuthenticated, isLoading, storeId, userRoleType, companyId, username, fullName } = useContext(AuthContext);\n    return (\n      <Route\n        {...rest}\n        render={(props) =>\n          (!isLoading) ? (\n            isAuthenticated ? (\n              <div>\n              <FullNavBar/>\n              <Component {...props} fullName={fullName} storeId={storeId} username={username} userRoleType={userRoleType} companyId={companyId} />\n            </div>\n            ) : (\n              <Redirect\n                push to={{\n                  pathname: \"/signin\",\n                  state: { from: props.location },\n                }}\n              />\n            )\n          ) : (\n            <Loading />\n          )\n        }\n      />\n    );\n  }\n\n\n  return  (\n    <Auth>\n    <Router>\n      <Switch>\n          <AuthenticatedRoute exact path=\"/\" component={HomePage} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username} isAuthenticated={isAuthenticated}/>\n          <AuthenticatedRoute exact path=\"/home\" component={HomePage} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username}isAuthenticated={isAuthenticated} />\n          <AuthenticatedRoute path=\"/current-orders\" component={CurrentPickups} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username}isAuthenticated={isAuthenticated}/>\n          <AuthenticatedRoute exact path=\"/completed-orders\" component={CompletedPickups} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username} isAuthenticated={isAuthenticated}/>\n          <AuthenticatedRoute exact path=\"/admin\" component={Admin} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username}isAuthenticated={isAuthenticated}/>\n          <AuthenticatedRoute exact path=\"/logout\" component={Logout} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username}isAuthenticated={isAuthenticated}/>\n          <Route exact path=\"/signin\" component={SignInPage} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username} isAuthenticated={isAuthenticated}/>\n          <Route exact path=\"/reset-password\" component={ResetPassword} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username}isAuthenticated={isAuthenticated}/>\n          <Route exact path=\"/forgot-password\" component={ForgotPassword} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username}isAuthenticated={isAuthenticated}/>\n          <AuthenticatedRoute exact path=\"*\" component={PageNotFound} fullName={fullName} storeId={storeId} companyId={companyId} userRoleType={userRoleType} username={username}isAuthenticated={isAuthenticated} />\n      </Switch>\n    </Router>\n    </Auth> \n  );\n};\n\nexport default TopNav;\n","import React from 'react';\nimport './css/normalize.css';\nimport './css/scaffold.css';\nimport \"./css/header.css\";\nimport './css/brand.css';\nimport './css/signIn.css';\nimport './css/admin.css';\n\nimport TopNav from './components/topNav';\n\nconst App = (props) => {\n  \n  \n  return (\n    <div>\n     <TopNav />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n      <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}